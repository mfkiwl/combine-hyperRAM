//
//  application_types.h
//  C12_rtos
//
//  Created by Matthew Fonken on 1/18/20.
//  Copyright Â© 2020 Matthew Fonken. All rights reserved.
//

#ifndef application_types_h
#define application_types_h

#include "globaltypes.h"

#include "application_debug.h"
#include "taumanager.h"
#include "communicationmanager.h"
#include "motionsensor.h"
#include "rho_client.h"
#include "batterymonitor.h"
#include "touchcontroller.h"
#include "hapticcontroller.h"

typedef enum
{
    APPLICATION_TASK_SHELF_ENTRY_ID_NULL_TASKS = 0,
    APPLICATION_TASK_SHELF_ENTRY_ID_GLOBAL_TASKS,
    APPLICATION_TASK_SHELF_ENTRY_ID_SENSOR_MOTION_TASKS,
    APPLICATION_TASK_SHELF_ENTRY_ID_SENSOR_TOUCH_TASKS,
    APPLICATION_TASK_SHELF_ENTRY_ID_SENSOR_TIP_TASKS,
    APPLICATION_TASK_SHELF_ENTRY_ID_SENSOR_BATTERY_MONITOR_TASKS,
    APPLICATION_TASK_SHELF_ENTRY_ID_SENSOR_RHO_TASKS,
    APPLICATION_TASK_SHELF_ENTRY_ID_DRIVER_HAPTIC_PRIMARY_TASKS,
    APPLICATION_TASK_SHELF_ENTRY_ID_COMMUNICATION_HOST_RADIO_TASKS,
    APPLICATION_TASK_SHELF_ENTRY_ID_COMMUNICATION_SUB_RADIO_TASKS
} APPLICATION_TASK_SHELF_ENTRY_ID, application_task_shelf_entry_id_t;

typedef enum
{
    APPLICATION_ACTION_ID_NONE = 0,
    APPLICATION_COMBINE_GLOBAL,
    
    APPLICATION_PROBE_ID_HOST,
    APPLICATION_PROBE_ID_RHO,
    APPLICATION_PROBE_ID_TIP,
    APPLICATION_PROBE_ID_BATTERY_MONITOR,

    APPLICATION_INTERRUPTER_ID_TAU_PACKET_TRANSMIT,
    APPLICATION_INTERRUPTER_ID_TAU_PACKET_RECEIVE,
    APPLICATION_INTERRUPTER_ID_SUB_RADIO_PACKET_TRANSMIT,
    APPLICATION_INTERRUPTER_ID_HAPTIC_TRIGGER,
    
    APPLICATION_SCHEDULER_ID_TAU_PERFORM,
    APPLICATION_SCHEDULER_ID_TAU_PACKET_QUEUE,
    APPLICATION_SCHEDULER_ID_TIP_POLL,
    APPLICATION_SCHEDULER_ID_BATTERY_MONITOR_POLL,
    
    APPLICATION_SCHEDULER_ID_MOTION_INTERRUPT,
    APPLICATION_SCHEDULER_ID_RHO_INTERRUPT,
    APPLICATION_SCHEDULER_ID_TOUCH_INTERRUPT,

    NUM_APPLICATION_TASKS
} APPLICATION_TASK_ID, application_task_id_t;

typedef enum
{
    /* General */
    APPLICATION_SUBACTIVITY_NONE = 0,
    APPLICATION_SUBACTIVITY_SELF_CHECK,
    APPLICATION_SUBACTIVITY_WAIT_FOR_WAKE,
    
    /* Initialization */
    APPLICATION_SUBACTIVITY_INIT_COMMUNICATION,
    APPLICATION_SUBACTIVITY_INIT_COMPONENTS,
    APPLICATION_SUBACTIVITY_INIT_TAU_CLIENT,
    APPLICATION_SUBACTIVITY_INIT_RHO_CLIENT,
    APPLICATION_SUBACTIVITY_INIT_CONFIRM,
    APPLICATION_SUBACTIVITY_BATTERY_MONITOR_ACTIVE,
    
    /* Profile */
//    APPLICATION_SUBACTIVITY_PROFILE_FETCH,
//    APPLICATION_SUBACTIVITY_PROFILE_PERFORM,
//    APPLICATION_SUBACTIVITY_PROFILE_UPDATE,
//    APPLICATION_SUBACTIVITY_PROFILE_STORE,
    
    /* Probes */
    APPLICATION_SUBACTIVITY_SEND_HOST_PROBE,
    APPLICATION_SUBACTIVITY_RECEIVE_HOST_PROBE,
    
    /* Handles */
    APPLICATION_SUBACTIVITY_HANDLE_MOTION_EVENT,
    APPLICATION_SUBACTIVITY_HANDLE_RHO_EVENT,
    APPLICATION_SUBACTIVITY_HANDLE_TOUCH_EVENT,
    
    APPLICATION_SUBACTIVITY_POLL_BATTERY_MONITOR,
    APPLICATION_SUBACTIVITY_POLL_TIP,
    
    APPLICATION_SUBACTIVITY_TRIGGER_HAPTIC,
    
    APPLICATION_SUBACTIVITY_TRANSMIT_HOST_PACKET,
    APPLICATION_SUBACTIVITY_RECEIVE_HOST_PACKET,
    APPLICATION_SUBACTIVITY_TRANSMIT_SUB_RADIO_PACKET,
    APPLICATION_SUBACTIVITY_RECEIVE_SUB_RADIO_PACKET,
    
    /* Tau */
    APPLICATION_SUBACTIVITY_TAU_STANDARD_RHO_START,
    APPLICATION_SUBACTIVITY_TAU_STANDARD_MOTION_START,
    APPLICATION_SUBACTIVITY_TAU_STANDARD_START,
    
    /* Sleep/Idle */
    APPLICATION_SUBACTIVITY_TAU_STANDARD_RHO_STOP,
    APPLICATION_SUBACTIVITY_TAU_STANDARD_MOTION_STOP,
    APPLICATION_SUBACTIVITY_TAU_STOP,
    APPLICATION_SUBACTIVITY_BATTERY_MONITOR_SLEEP,
    
    NUM_APPLICATION_SUBACTIVITIES
} APPLICATION_SUBACTIVITY_T, application_subactivity_t;

typedef enum
{
    APPLICATION_SENSOR_MOTION_PRIMARY = 0x50,
    APPLICATION_SENSOR_MOTION_SECONDARY = 0x51,
    APPLICATION_SENSOR_RHO_MODULE_PRIMARY = 0x60,
    APPLICATION_SENSOR_RHO_MODULE_SECONDARY = 0x61,
    APPLICATION_SENSOR_TOUCH_PRIMARY = 0x70,
    APPLICATION_SENSOR_TOUCH_SECONDARY = 0x71,
    APPLICATION_SENSOR_TIP_PRIMARY = 0x80,
    APPLICATION_SENSOR_TIP_SECONDARY = 0x81,
    APPLICATION_SENSOR_TIP_ALTERNATE = 0x82,
    APPLICATION_SENSOR_BATTERY_MONITOR_PRIMARY = 0x90
} APPLICATION_SENSOR;

typedef enum
{
    APPLICATION_DRIVER_BLE_RADIO = 0x30,
    APPLICATION_DRIVER_SUB_RADIO = 0x40,
    APPLICATION_DRIVER_HAPTIC_PRIMARY = 0x50,
    APPLICATION_DRIVER_HAPTIC_SECONDARY = 0x51,
    APPLICATION_DRIVER_REGULATOR_1V5 = 0x61
} APPLICATION_DRIVER;

#define APPLICATION_COMPONENT_NONE                       COMPONENT_ID(COMPONENT_TYPE_NONE,    0)
#define APPLICATION_COMPONENT_MOTION_PRIMARY             COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_SENSOR_MOTION_PRIMARY)
#define APPLICATION_COMPONENT_MOTION_SECONDARY           COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_SENSOR_MOTION_SECONDARY)
#define APPLICATION_COMPONENT_RHO_MODULE_PRIMARY         COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_SENSOR_RHO_MODULE_PRIMARY)
#define APPLICATION_COMPONENT_RHO_MODULE_SECONDARY       COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_COMPONENT_ACTIVITY_SCHEDULE,  APPLICATION_SENSOR_RHO_MODULE_SECONDARY)
#define APPLICATION_COMPONENT_TOUCH_PRIMARY              COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_SENSOR_TOUCH_PRIMARY)
#define APPLICATION_COMPONENT_TOUCH_SECONDARY            COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_SENSOR_TOUCH_SECONDARY)
#define APPLICATION_COMPONENT_TIP_PRIMARY                COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_SENSOR_TIP_PRIMARY)
#define APPLICATION_COMPONENT_TIP_SECONDARY              COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_SENSOR_TIP_SECONDARY)
#define APPLICATION_COMPONENT_BATTERY_MONITOR_PRIMARY    COMPONENT_ID(COMPONENT_TYPE_SENSOR, APPLICATION_SENSOR_BATTERY_MONITOR_PRIMARY)
#define APPLICATION_COMPONENT_BLE_RADIO_TX               COMPONENT_ID(COMPONENT_TYPE_DRIVER, APPLICATION_DRIVER_BLE_RADIO)
#define APPLICATION_COMPONENT_BLE_RADIO_RX               COMPONENT_ID(COMPONENT_TYPE_DRIVER, APPLICATION_DRIVER_BLE_RADIO)
#define APPLICATION_COMPONENT_SUB_RADIO_TX               COMPONENT_ID(COMPONENT_TYPE_DRIVER, APPLICATION_DRIVER_SUB_RADIO)
#define APPLICATION_COMPONENT_HAPTIC_PRIMARY             COMPONENT_ID(COMPONENT_TYPE_DRIVER, APPLICATION_DRIVER_HAPTIC_PRIMARY)
#define APPLICATION_COMPONENT_HAPTIC_SECONDARY           COMPONENT_ID(COMPONENT_TYPE_DRIVER, APPLICATION_DRIVER_HAPTIC_SECONDARY)
#define APPLICATION_COMPONENT_REGULATOR_1V5              COMPONENT_ID(COMPONENT_TYPE_DRIVER, APPLICATION_DRIVER_REGULATOR_1V5)

typedef struct
{
tau_config_t
    tau;
uint8_t
    battery_monitor_mode,
    haptic;
} application_config_t;

typedef struct
{
orientation_data_t
    orientation;
rho_data_t
    rho;
touch_data_t
    touch;
comm_packet_t
    packet_in,
    packet_out,
    sub_packet_in,
    sub_packet_out;
battery_monitor_basic_t
    battery;
application_config_t
    config;
} application_buffers_t;
typedef struct
{
imu_t
    IMU;
rho_t
    Rho;
tau_t
    Kinetic;
} application_objects_t;

#endif /* application_types_h */
