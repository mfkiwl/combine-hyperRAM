                                  - os_cpu_a -                        Page    1

    1                           ;*********************************************
                                ***********************************************
                                ************
    2                           ;                                             
                                 uC/OS-III
    3                           ;                                        The
                                 Real-Time Kernel
    4                           ;
    5                           ;                    Copyright 2009-2020
                                 Silicon Laboratories Inc. www.silabs.com
    6                           ;
    7                           ;                                 SPDX-License
                                -Identifier: APACHE-2.0
    8                           ;
    9                           ;               This software is subject to an
                                 open source license and is distributed
                                 by
   10                           ;                Silicon Laboratories Inc.
                                 pursuant to the terms of the Apache License,
   11                           ;                    Version 2.0 available at
                                 www.apache.org/licenses/LICENSE-2.0.
   12                           ;
   13                           ;*********************************************
                                ***********************************************
                                ************
   14                           
   15                           ;*********************************************
                                ***********************************************
                                ************
   16                           ;
   17                           ;                                            
                                 ARMv7-M Port
   18                           ;
   19                           ; File      : os_cpu_a.asm
   20                           ; Version   : V3.08.00
   21                           ;*********************************************
                                ***********************************************
                                ************
   22                           ; For       : ARMv7-M Cortex-M
   23                           ; Mode      : Thumb-2 ISA
   24                           ; Toolchain : IAR EWARM
   25                           ;*********************************************
                                ***********************************************
                                ************
   26                           ; Note(s)   : (1) This port supports the ARM
                                 Cortex-M3, Cortex-M4 and Cortex-M7 architectur
                                es.
   27                           ;             (2) It has been tested with the
                                 following Hardware Floating Point Unit.
   28                           ;                 (a) Single-precision:
                                 FPv4-SP-D16-M and FPv5-SP-D16-M
   29                           ;                 (b) Double-precision:
                                 FPv5-D16-M
   30                           ;*********************************************
                                ***********************************************
                                ************
   31                           ;
   32                           
   33                           ;*********************************************
                                ***********************************************
                                ************
   34                           ;                                         
                                 PUBLIC FUNCTIONS
   35                           ;*********************************************
                                ***********************************************
                                ************
   36                           
   37                                                                         
                                                  ; External references.
   38                               EXTERN  OSPrioCur
   39                               EXTERN  OSPrioHighRdy
   40                               EXTERN  OSTCBCurPtr
   41                               EXTERN  OSTCBHighRdyPtr
   42                               EXTERN  OSIntExit
   43                               EXTERN  OSTaskSwHook
   44                               EXTERN  OS_CPU_ExceptStkBase
   45                               EXTERN  OS_KA_BASEPRI_Boundary
   46                           
                                  - os_cpu_a -                        Page    2

   47                           
   48                               PUBLIC  OSStartHighRdy                    
                                                  ; Functions declared in this
                                 file
   49                               PUBLIC  OSCtxSw
   50                               PUBLIC  OSIntCtxSw
   51                               PUBLIC  OS_CPU_PendSVHandler
   52                           
   53                           #ifdef __ARMVFP__
   54                               PUBLIC  OS_CPU_FP_Reg_Push
   55                               PUBLIC  OS_CPU_FP_Reg_Pop
   56                           #endif
   57                           
   58                           
   59                           ;*********************************************
                                ***********************************************
                                ************
   60                           ;                                             
                                  EQUATES
   61                           ;*********************************************
                                ***********************************************
                                ************
   62                           
   63                           NVIC_INT_CTRL   EQU     0xE000ED04            
                                                  ; Interrupt control state
                                 register.
   64                           NVIC_SYSPRI14   EQU     0xE000ED22            
                                                  ; System priority register
                                 (priority 14).
   65                           NVIC_PENDSV_PRI EQU           0xFF            
                                                  ; PendSV priority value
                                 (lowest).
   66                           NVIC_PENDSVSET  EQU     0x10000000            
                                                  ; Value to trigger PendSV
                                 exception.
   67                           
   68                           
   69                           ;*********************************************
                                ***********************************************
                                ************
   70                           ;                                     CODE
                                 GENERATION DIRECTIVES
   71                           ;*********************************************
                                ***********************************************
                                ************
   72                           
   73                               RSEG CODE:CODE:NOROOT(2)
   74                               THUMB
   75                           
   76                           
   77                           ;*********************************************
                                ***********************************************
                                ************
   78                           ;                                   FLOATING
                                 POINT REGISTERS PUSH
   79                           ;                             void  OS_CPU_FP_
                                Reg_Push (CPU_STK  *stkPtr)
   80                           ;
   81                           ; Note(s) : 1) This function saves S16-S31
                                 registers of the Floating Point Unit.
   82                           ;
   83                           ;           2) Pseudo-code is:
   84                           ;              a) Push remaining FPU regs
                                 S16-S31 on process stack;
   85                           ;              b) Update OSTCBCurPtr->StkPtr;
   86                           ;*********************************************
                                ***********************************************
                                ************
   87                           
   88                           #ifdef __ARMVFP__
   89                           OS_CPU_FP_Reg_Push
   90    00000000 EFF30981          MRS     R1, PSP                            
                                                                  ; PSP is
                                                  process stack pointer
   91    00000004 21B1              CBZ     R1, OS_CPU_FP_nosave               
                                                                  ; Skip FP
                                                  register save the first
                                                  time
                                  - os_cpu_a -                        Page    3

   92                           
   93    00000006 20ED108A          VSTMDB  R0!, {S16-S31}
   94    0000000A 4149              LDR     R1, =OSTCBCurPtr
   95    0000000C 0A68              LDR     R2, [R1]
   96    0000000E 1060              STR     R0, [R2]
   97                           OS_CPU_FP_nosave
   98    00000010 7047              BX      LR
   99                           #endif
  100                           
  101                           
  102                           ;*********************************************
                                ***********************************************
                                ************
  103                           ;                                   FLOATING
                                 POINT REGISTERS POP
  104                           ;                             void  OS_CPU_FP_
                                Reg_Pop (CPU_STK  *stkPtr)
  105                           ;
  106                           ; Note(s) : 1) This function restores S16-S31
                                 of the Floating Point Unit.
  107                           ;
  108                           ;           2) Pseudo-code is:
  109                           ;              a) Restore regs S16-S31 of new
                                 process stack;
  110                           ;              b) Update OSTCBHighRdyPtr->StkP
                                tr pointer of new proces stack;
  111                           ;*********************************************
                                ***********************************************
                                ************
  112                           
  113                           #ifdef __ARMVFP__
  114                           OS_CPU_FP_Reg_Pop
  115    00000012 B0EC108A          VLDMIA  R0!, {S16-S31}
  116    00000016 3F49              LDR     R1, =OSTCBHighRdyPtr
  117    00000018 0A68              LDR     R2, [R1]
  118    0000001A 1060              STR     R0, [R2]
  119    0000001C 7047              BX      LR
  120                           #endif
  121                           
  122                           
  123                           ;*********************************************
                                ***********************************************
                                ************
  124                           ;                                        
                                 START MULTITASKING
  125                           ;                                      void
                                 OSStartHighRdy(void)
  126                           ;
  127                           ; Note(s) : 1) This function triggers a PendSV
                                 exception (essentially, causes a context
                                 switch) to cause
  128                           ;              the first task to start.
  129                           ;
  130                           ;           2) During task execution, PSP is
                                 used as the stack pointer.
  131                           ;              When an exception occurs, the
                                 core will switch to MSP until the exception
                                 return.
  132                           ;
  133                           ;           3) OSStartHighRdy() MUST:
  134                           ;              a) Setup PendSV exception
                                 priority to lowest;
  135                           ;              b) Set initial PSP to 0, to
                                 tell context switcher this is first run;
  136                           ;              c) Set the main stack to
                                 OS_CPU_ExceptStkBase
  137                           ;              d) Get current high priority,
                                 OSPrioCur = OSPrioHighRdy;
  138                           ;              e) Get current ready thread
                                 TCB, OSTCBCurPtr = OSTCBHighRdyPtr;
  139                           ;              f) Get new process SP from TCB,
                                 SP = OSTCBHighRdyPtr->StkPtr;
  140                           ;              g) Restore R0-R11 and R14 from
                                 new process stack;
  141                           ;              h) Enable interrupts (tasks
                                 will run with interrupts enabled).
  142                           ;*********************************************
                                ***********************************************
                                  - os_cpu_a -                        Page    4

                                ************
  143                           
  144                           OSStartHighRdy
  145    0000001E 72B6              CPSID   I                                  
                  ; Prevent interruption during context switch
  146    00000020 4EF62250CEF20     MOV32   R0, NVIC_SYSPRI14                  
                                                                  ; Set the
                                                  PendSV exception priority
                  000          
  147    00000028 40F2FF01C0F20     MOV32   R1, NVIC_PENDSV_PRI
                  001          
  148    00000030 0170              STRB    R1, [R0]
  149                           
  150    00000032 0020              MOVS    R0, #0                             
                                                                  ; Set the PSP
                                                  to 0 for initial context
                                                  switch call
  151    00000034 80F30988          MSR     PSP, R0
  152                           
  153    00000038 .............     MOV32   R0, OS_CPU_ExceptStkBase           
                                                                  ; Initialize
                                                  the MSP to the OS_CPU_ExceptS
                                                 tkBase
                  ...          
  154    00000040 0168              LDR     R1, [R0]
  155    00000042 81F30888          MSR     MSP, R1
  156                           
  157    00000046 ........          BL      OSTaskSwHook                       
                                                              ; Call OSTaskSwHo
                                             ok() for FPU Push & Pop
  158                           
  159    0000004A .............     MOV32   R0, OSPrioCur                      
                                                                  ; OSPrioCur  
                                                  = OSPrioHighRdy;
                  ...          
  160    00000052 .............     MOV32   R1, OSPrioHighRdy
                  ...          
  161    0000005A 0A78              LDRB    R2, [R1]
  162    0000005C 0270              STRB    R2, [R0]
  163                           
  164    0000005E .............     MOV32   R0, OSTCBCurPtr                    
                                                                  ; OSTCBCurPtr
                                                  = OSTCBHighRdyPtr;
                  ...          
  165    00000066 .............     MOV32   R1, OSTCBHighRdyPtr
                  ...          
  166    0000006E 0A68              LDR     R2, [R1]
  167    00000070 0260              STR     R2, [R0]
  168                           
  169    00000072 1068              LDR     R0, [R2]                           
                                                                  ; R0 is new
                                                  process SP; SP = OSTCBHighRdy
                                                 Ptr->StkPtr;
  170    00000074 80F30988          MSR     PSP, R0                            
                                                                   ; Load PSP
                                                   with new process SP
  171                           
  172    00000078 EFF31480          MRS     R0, CONTROL
  173    0000007C 40F00200          ORR     R0, R0, #2
  174    00000080 80F31488          MSR     CONTROL, R0
  175    00000084 BFF36F8F          ISB                                        
                  ; Sync instruction stream
  176                           
  177    00000088 BDE8F04F          LDMFD    SP!, {R4-R11, LR}                 
                                                                    ; Restore
                                                    r4-11, lr from new process
                                                    stack
  178    0000008C 0FBC              LDMFD    SP!, {R0-R3}                      
                                                                    ; Restore
                                                    r0, r3
  179    0000008E BDE80050          LDMFD    SP!, {R12, LR}                    
                                                                    ; Load R12
                                                    and LR
  180    00000092 06BC              LDMFD    SP!, {R1, R2}                     
                                                                    ; Load PC
                                                    and discard xPSR
  181    00000094 62B6              CPSIE    I
  182    00000096 0847              BX       R1
                                  - os_cpu_a -                        Page    5

  183                           
  184                           
  185                           ;*********************************************
                                ***********************************************
                                ************
  186                           ;                       PERFORM A CONTEXT
                                 SWITCH (From task level) - OSCtxSw()
  187                           ;                   PERFORM A CONTEXT SWITCH
                                 (From interrupt level) - OSIntCtxSw()
  188                           ;
  189                           ; Note(s) : 1) OSCtxSw() is called when OS
                                 wants to perform a task context switch.  This
                                 function
  190                           ;              triggers the PendSV exception
                                 which is where the real work is done.
  191                           ;
  192                           ;           2) OSIntCtxSw() is called by
                                 OSIntExit() when it determines a context
                                 switch is needed as
  193                           ;              the result of an interrupt. 
                                 This function simply triggers a PendSV
                                 exception which will
  194                           ;              be handled when there are no
                                 more interrupts active and interrupts are
                                 enabled.
  195                           ;*********************************************
                                ***********************************************
                                ************
  196                           
  197                           OSCtxSw
  198                           OSIntCtxSw
  199    00000098 1F48              LDR     R0, =NVIC_INT_CTRL                 
                                                                  ; Trigger the
                                                  PendSV exception (causes
                                                  context switch)
  200    0000009A 2049              LDR     R1, =NVIC_PENDSVSET
  201    0000009C 0160              STR     R1, [R0]
  202    0000009E 7047              BX      LR
  203                           
  204                           
  205                           ;*********************************************
                                ***********************************************
                                ************
  206                           ;                                       HANDLE
                                 PendSV EXCEPTION
  207                           ;                                   void
                                 OS_CPU_PendSVHandler(void)
  208                           ;
  209                           ; Note(s) : 1) PendSV is used to cause a
                                 context switch.  This is a recommended method
                                 for performing
  210                           ;              context switches with Cortex-M.
                                  This is because the Cortex-M auto-saves half
                                 of the
  211                           ;              processor context on any
                                 exception, and restores same on return from
                                 exception.  So only
  212                           ;              saving of R4-R11 & R14 is
                                 required and fixing up the stack pointers.
                                 Using the PendSV exception
  213                           ;              this way means that context
                                 saving and restoring is identical whether it
                                 is initiated from
  214                           ;              a thread or occurs due to an
                                 interrupt or exception.
  215                           ;
  216                           ;           2) Pseudo-code is:
  217                           ;              a) Get the process SP
  218                           ;              b) Save remaining regs r4-r11 &
                                 r14 on process stack;
  219                           ;              c) Save the process SP in its
                                 TCB, OSTCBCurPtr->OSTCBStkPtr = SP;
  220                           ;              d) Call OSTaskSwHook();
  221                           ;              e) Get current high priority,
                                 OSPrioCur = OSPrioHighRdy;
  222                           ;              f) Get current ready thread
                                 TCB, OSTCBCurPtr = OSTCBHighRdyPtr;
  223                           ;              g) Get new process SP from TCB,
                                  - os_cpu_a -                        Page    6

                                 SP = OSTCBHighRdyPtr->OSTCBStkPtr;
  224                           ;              h) Restore R4-R11 and R14 from
                                 new process stack;
  225                           ;              i) Perform exception return
                                 which will restore remaining context.
  226                           ;
  227                           ;           3) On entry into PendSV handler:
  228                           ;              a) The following have been
                                 saved on the process stack (by processor):
  229                           ;                 xPSR, PC, LR, R12,
                                 R0-R3
  230                           ;              b) Processor mode is switched
                                 to Handler mode (from Thread mode)
  231                           ;              c) Stack is Main stack
                                 (switched from Process stack)
  232                           ;              d) OSTCBCurPtr      points to
                                 the OS_TCB of the task to suspend
  233                           ;                 OSTCBHighRdyPtr  points to
                                 the OS_TCB of the task to resume
  234                           ;
  235                           ;           4) Since PendSV is set to lowest
                                 priority in the system (by OSStartHighRdy()
                                 above), we
  236                           ;              know that it will only be run
                                 when no other exception or interrupt is
                                 active, and
  237                           ;              therefore safe to assume that
                                 context being switched out was using the
                                 process stack (PSP).
  238                           ;
  239                           ;           5) Increasing priority using a
                                 write to BASEPRI does not take effect
                                 immediately.
  240                           ;              (a) IMPLICATION  This erratum
                                 means that the instruction after an MSR to
                                 boost BASEPRI
  241                           ;                  might incorrectly be
                                 preempted by an insufficient high priority
                                 exception.
  242                           ;
  243                           ;              (b) WORKAROUND  The MSR to
                                 boost BASEPRI can be replaced by the following
                                 code sequence:
  244                           ;
  245                           ;                  CPSID i
  246                           ;                  MSR to BASEPRI
  247                           ;                  DSB
  248                           ;                  ISB
  249                           ;                  CPSIE i
  250                           ;*********************************************
                                ***********************************************
                                ************
  251                           
  252                           OS_CPU_PendSVHandler
  253    000000A0 72B6              CPSID   I                                  
                  ; Cortex-M7 errata notice. See Note #5
  254    000000A2 .............     MOV32   R2, OS_KA_BASEPRI_Boundary         
                                                                  ; Set BASEPRI
                                                  priority level required for
                                                  exception preemption
                  ...          
  255    000000AA 1168              LDR     R1, [R2]
  256    000000AC 81F31188          MSR     BASEPRI, R1
  257    000000B0 BFF34F8F          DSB
  258    000000B4 BFF36F8F          ISB
  259    000000B8 62B6              CPSIE   I
  260                           
  261    000000BA EFF30980          MRS     R0, PSP                            
                                                                  ; PSP is
                                                  process stack pointer
  262    000000BE 20E9F04F          STMFD   R0!, {R4-R11, R14}                 
                                                                   ; Save
                                                   remaining regs r4-11, R14 on
                                                   process stack
  263                           
  264    000000C2 .............     MOV32   R5, OSTCBCurPtr                    
                                                                  ; OSTCBCurPtr
                                                 ->StkPtr = SP;
                                  - os_cpu_a -                        Page    7

                  ...          
  265    000000CA 2968              LDR     R1, [R5]
  266    000000CC 0860              STR     R0, [R1]                           
                                                                  ; R0 is SP of
                                                  process being switched
                                                  out
  267                           
  268                                                                         
                                                  ; At this point, entire
                                 context of process has been saved
  269    000000CE 7446              MOV     R4, LR                             
                                                                  ; Save LR
                                                  exc_return value
  270    000000D0 ........          BL      OSTaskSwHook                       
                                                              ; Call OSTaskSwHo
                                             ok() for FPU Push & Pop
  271                           
  272    000000D4 .............     MOV32   R0, OSPrioCur                      
                                                                  ; OSPrioCur  
                                                  = OSPrioHighRdy;
                  ...          
  273    000000DC .............     MOV32   R1, OSPrioHighRdy
                  ...          
  274    000000E4 0A78              LDRB    R2, [R1]
  275    000000E6 0270              STRB    R2, [R0]
  276                           
  277    000000E8 .............     MOV32   R1, OSTCBHighRdyPtr                
                                                                  ; OSTCBCurPtr
                                                  = OSTCBHighRdyPtr;
                  ...          
  278    000000F0 0A68              LDR     R2, [R1]
  279    000000F2 2A60              STR     R2, [R5]
  280                           
  281    000000F4 44F0040E          ORR     LR,  R4, #0x04                     
                                                                       ; Ensure
                                                       exception return uses
                                                       process stack
  282    000000F8 1068              LDR     R0,  [R2]                          
                                                                   ; R0 is new
                                                   process SP; SP = OSTCBHighRd
                                                  yPtr->StkPtr;
  283    000000FA B0E8F04F          LDMFD   R0!, {R4-R11, R14}                 
                                                                   ; Restore
                                                   r4-11, R14 from new process
                                                   stack
  284    000000FE 80F30988          MSR     PSP, R0                            
                                                                   ; Load PSP
                                                   with new process SP
  285                           
  286    00000102 40F20002C0F20     MOV32   R2, #0                             
                                                                  ; Restore
                                                  BASEPRI priority level to
                                                  0
                  002          
  287    0000010A 82F31188          MSR     BASEPRI, R2
  288    0000010E 7047              BX      LR                                 
                                                              ; Exception
                                              return will restore remaining
                                              context
  289                           
  289.1                                  TABLE
  289.2  00000110 ........              Reference on line 94
  289.3  00000114 ........              Reference on line 116
  289.4  00000118 04ED00E0              Reference on line 199
  289.5  0000011C 00000010              Reference on line 200
  290                               END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 288         #
##############################



