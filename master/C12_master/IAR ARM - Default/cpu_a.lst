                                   - cpu_a -                          Page    1

    1                           ;*********************************************
                                ***********************************************
                                ************
    2                           ;                                             
                                  uC/CPU
    3                           ;                                    CPU
                                 CONFIGURATION & PORT LAYER
    4                           ;
    5                           ;                    Copyright 2004-2020
                                 Silicon Laboratories Inc. www.silabs.com
    6                           ;
    7                           ;                                 SPDX-License
                                -Identifier: APACHE-2.0
    8                           ;
    9                           ;               This software is subject to an
                                 open source license and is distributed
                                 by
   10                           ;                Silicon Laboratories Inc.
                                 pursuant to the terms of the Apache License,
   11                           ;                    Version 2.0 available at
                                 www.apache.org/licenses/LICENSE-2.0.
   12                           ;
   13                           ;*********************************************
                                ***********************************************
                                ************
   14                           
   15                           ;*********************************************
                                ***********************************************
                                ************
   16                           ;
   17                           ;                                           
                                 CPU PORT FILE
   18                           ;
   19                           ;                                             
                                  ARMv7-M
   20                           ;                                          
                                 IAR C Compiler
   21                           ;
   22                           ; Filename : cpu_a.asm
   23                           ; Version  : v1.32.00
   24                           ;*********************************************
                                ***********************************************
                                ************
   25                           ; Note(s)  : This port supports the ARM
                                 Cortex-M3, Cortex-M4 and Cortex-M7 architectur
                                es.
   26                           ;*********************************************
                                ***********************************************
                                ************
   27                           
   28                           
   29                           ;*********************************************
                                ***********************************************
                                ************
   30                           ;                                          
                                 PUBLIC FUNCTIONS
   31                           ;*********************************************
                                ***********************************************
                                ************
   32                           
   33                                   PUBLIC  CPU_IntDis
   34                                   PUBLIC  CPU_IntEn
   35                           
   36                                   PUBLIC  CPU_SR_Save
   37                                   PUBLIC  CPU_SR_Restore
   38                           
   39                                   PUBLIC  CPU_WaitForInt
   40                                   PUBLIC  CPU_WaitForExcept
   41                           
   42                           
   43                                   PUBLIC  CPU_CntLeadZeros
   44                                   PUBLIC  CPU_CntTrailZeros
   45                                   PUBLIC  CPU_RevBits
   46                           
   47                           
   48                           ;*********************************************
                                ***********************************************
                                ************
                                   - cpu_a -                          Page    2

   49                           ;                                      CODE
                                 GENERATION DIRECTIVES
   50                           ;*********************************************
                                ***********************************************
                                ************
   51                           
   52                                   RSEG CODE:CODE:NOROOT(2)
   53                                   THUMB
   54                           
   55                           
   56                           ;*********************************************
                                ***********************************************
                                ************
   57                           ;                                    DISABLE
                                 and ENABLE INTERRUPTS
   58                           ;
   59                           ; Description : Disable/Enable interrupts.
   60                           ;
   61                           ; Prototypes  : void  CPU_IntDis(void);
   62                           ;               void  CPU_IntEn (void);
   63                           ;*********************************************
                                ***********************************************
                                ************
   64                           
   65                           CPU_IntDis
   66    00000000 72B6                  CPSID   I
   67    00000002 7047                  BX      LR
   68                           
   69                           
   70                           CPU_IntEn
   71    00000004 62B6                  CPSIE   I
   72    00000006 7047                  BX      LR
   73                           
   74                           
   75                           ;*********************************************
                                ***********************************************
                                ************
   76                           ;                                     
                                 CRITICAL SECTION FUNCTIONS
   77                           ;
   78                           ; Description : Disable/Enable Kernel aware
                                 interrupts by preserving the state of BASEPRI.
                                  Generally speaking,
   79                           ;               the state of the BASEPRI
                                 interrupt exception processing is stored in
                                 the local variable
   80                           ;               'cpu_sr' & Kernel Aware
                                 interrupts are then disabled ('cpu_sr' is
                                 allocated in all functions
   81                           ;               that need to disable Kernel
                                 aware interrupts). The previous BASEPRI
                                 interrupt state is restored
   82                           ;               by copying 'cpu_sr' into the
                                 BASEPRI register.
   83                           ;
   84                           ; Prototypes  : CPU_SR  CPU_SR_Save   (CPU_SR 
                                 new_basepri);
   85                           ;               void    CPU_SR_Restore(CPU_SR 
                                 cpu_sr);
   86                           ;
   87                           ; Note(s)     : (1) These functions are used
                                 in general like this :
   88                           ;
   89                           ;                       void  Task (void 
                                 *p_arg)
   90                           ;                       {
   91                           ;                           CPU_SR_ALLOC();   
                                                  /* Allocate storage for CPU
                                 status register */
   92                           ;                               :
   93                           ;                               :
   94                           ;                           CPU_CRITICAL_ENTER
                                ();               /* cpu_sr = CPU_SR_Save();   
                                               */
   95                           ;                               :
   96                           ;                               :
   97                           ;                           CPU_CRITICAL_EXIT(
                                );                /* CPU_SR_Restore(cpu_sr);   
                                   - cpu_a -                          Page    3

                                               */
   98                           ;                               :
   99                           ;                       }
  100                           ;
  101                           ;               (2) Increasing priority using
                                 a write to BASEPRI does not take effect
                                 immediately.
  102                           ;                   (a) IMPLICATION  This
                                 erratum means that the instruction after an
                                 MSR to boost BASEPRI
  103                           ;                       might incorrectly be
                                 preempted by an insufficient high priority
                                 exception.
  104                           ;
  105                           ;                   (b) WORKAROUND  The MSR to
                                 boost BASEPRI can be replaced by the following
                                 code sequence:
  106                           ;
  107                           ;                       CPSID i
  108                           ;                       MSR to BASEPRI
  109                           ;                       DSB
  110                           ;                       ISB
  111                           ;                       CPSIE i
  112                           ;*********************************************
                                ***********************************************
                                ************
  113                           
  114                           CPU_SR_Save
  115    00000008 72B6                  CPSID   I                              
  ; Cortex-M7 errata notice. See Note #2
  116    0000000A 02B4                  PUSH   {R1}
  117    0000000C EFF31181              MRS     R1, BASEPRI
  118    00000010 80F31188              MSR     BASEPRI, R0
  119    00000014 BFF34F8F              DSB
  120    00000018 BFF36F8F              ISB
  121    0000001C 0846                  MOV     R0, R1
  122    0000001E 02BC                  POP    {R1}
  123    00000020 62B6                  CPSIE   I
  124    00000022 7047                  BX      LR
  125                           
  126                           
  127                           CPU_SR_Restore
  128    00000024 72B6                  CPSID   I                              
  ; Cortex-M7 errata notice. See Note #2
  129    00000026 80F31188              MSR     BASEPRI, R0
  130    0000002A BFF34F8F              DSB
  131    0000002E BFF36F8F              ISB
  132    00000032 62B6                  CPSIE   I
  133    00000034 7047                  BX      LR
  134                           
  135                           
  136                           ;*********************************************
                                ***********************************************
                                ************
  137                           ;                                         WAIT
                                 FOR INTERRUPT
  138                           ;
  139                           ; Description : Enters sleep state, which will
                                 be exited when an interrupt is received.
  140                           ;
  141                           ; Prototypes  : void  CPU_WaitForInt
                                 (void)
  142                           ;
  143                           ; Argument(s) : none.
  144                           ;*********************************************
                                ***********************************************
                                ************
  145                           
  146                           CPU_WaitForInt:
  147    00000036 30BF                  WFI                                    
  ; Wait for interrupt
  148    00000038 7047                  BX      LR
  149                           
  150                           
  151                           ;*********************************************
                                ***********************************************
                                ************
  152                           ;                                         WAIT
                                   - cpu_a -                          Page    4

                                 FOR EXCEPTION
  153                           ;
  154                           ; Description : Enters sleep state, which will
                                 be exited when an exception is received.
  155                           ;
  156                           ; Prototypes  : void  CPU_WaitForExcept
                                 (void)
  157                           ;
  158                           ; Argument(s) : none.
  159                           ;*********************************************
                                ***********************************************
                                ************
  160                           
  161                           CPU_WaitForExcept:
  162    0000003A 20BF                  WFE                                    
  ; Wait for exception
  163    0000003C 7047                  BX      LR
  164                           
  165                           
  166                           ;*********************************************
                                ***********************************************
                                ************
  167                           ;                                        
                                 CPU_CntLeadZeros()
  168                           ;                                        COUNT
                                 LEADING ZEROS
  169                           ;
  170                           ; Description : Counts the number of
                                 contiguous, most-significant, leading zero
                                 bits before the
  171                           ;                   first binary one bit in a
                                 data value.
  172                           ;
  173                           ; Prototype   : CPU_DATA  CPU_CntLeadZeros(CPU
                                _DATA  val);
  174                           ;
  175                           ; Argument(s) : val         Data value to
                                 count leading zero bits.
  176                           ;
  177                           ; Return(s)   : Number of contiguous,
                                 most-significant, leading zero bits in
                                 'val'.
  178                           ;
  179                           ; Note(s)     : (1) (a) Supports 32-bit data
                                 value size as configured by 'CPU_DATA' (see
                                 'cpu.h
  180                           ;                       CPU WORD CONFIGURATION
                                  Note #1').
  181                           ;
  182                           ;                   (b) For 32-bit values
                                 :
  183                           ;
  184                           ;                             b31  b30  b29 
                                 ...  b04  b03  b02  b01  b00    # Leading
                                 Zeros
  185                           ;                             ---  ---  ---   
                                    ---  ---  ---  ---  ---    ---------------
  186                           ;                              1    x    x    
                                     x    x    x    x    x           
                                 0
  187                           ;                              0    1    x    
                                     x    x    x    x    x           
                                 1
  188                           ;                              0    0    1    
                                     x    x    x    x    x           
                                 2
  189                           ;                              :    :    :    
                                     :    :    :    :    :           
                                 :
  190                           ;                              :    :    :    
                                     :    :    :    :    :           
                                 :
  191                           ;                              0    0    0    
                                     1    x    x    x    x           27
  192                           ;                              0    0    0    
                                     0    1    x    x    x           28
  193                           ;                              0    0    0    
                                     0    0    1    x    x           29
                                   - cpu_a -                          Page    5

  194                           ;                              0    0    0    
                                     0    0    0    1    x           30
  195                           ;                              0    0    0    
                                     0    0    0    0    1           31
  196                           ;                              0    0    0    
                                     0    0    0    0    0           32
  197                           ;
  198                           ;
  199                           ;               (2) MUST be defined in
                                 'cpu_a.asm' (or 'cpu_c.c') if CPU_CFG_LEAD_ZER
                                OS_ASM_PRESENT is
  200                           ;                   #define'd in 'cpu_cfg.h'
                                 or 'cpu.h'.
  201                           ;*********************************************
                                ***********************************************
                                ************
  202                           
  203                           CPU_CntLeadZeros:
  204    0000003E B0FA80F0              CLZ     R0, R0                         
                                                      ; Count leading
                                                      zeros
  205    00000042 7047                  BX      LR
  206                           
  207                           
  208                           ;*********************************************
                                ***********************************************
                                ************
  209                           ;                                        
                                 CPU_CntTrailZeros()
  210                           ;                                        COUNT
                                 TRAILING ZEROS
  211                           ;
  212                           ; Description : Counts the number of
                                 contiguous, least-significant, trailing zero
                                 bits before the
  213                           ;                   first binary one bit in a
                                 data value.
  214                           ;
  215                           ; Prototype   : CPU_DATA  CPU_CntTrailZeros(CP
                                U_DATA  val);
  216                           ;
  217                           ; Argument(s) : val         Data value to
                                 count trailing zero bits.
  218                           ;
  219                           ; Return(s)   : Number of contiguous,
                                 least-significant, trailing zero bits in
                                 'val'.
  220                           ;
  221                           ; Note(s)     : (1) (a) Supports 32-bit data
                                 value size as configured by 'CPU_DATA' (see
                                 'cpu.h
  222                           ;                       CPU WORD CONFIGURATION
                                  Note #1').
  223                           ;
  224                           ;                   (b) For 32-bit values
                                 :
  225                           ;
  226                           ;                             b31  b30  b29 
                                 b28  b27  ...  b02  b01  b00    # Trailing
                                 Zeros
  227                           ;                             ---  ---  --- 
                                 ---  ---       ---  ---  ---    --------------
                                --
  228                           ;                              x    x    x   
                                 x    x         x    x    1           
                                 0
  229                           ;                              x    x    x   
                                 x    x         x    1    0           
                                 1
  230                           ;                              x    x    x   
                                 x    x         1    0    0           
                                 2
  231                           ;                              :    :    :   
                                 :    :         :    :    :           
                                 :
  232                           ;                              :    :    :   
                                 :    :         :    :    :           
                                 :
                                   - cpu_a -                          Page    6

  233                           ;                              x    x    x   
                                 x    1         0    0    0          
                                 27
  234                           ;                              x    x    x   
                                 1    0         0    0    0          
                                 28
  235                           ;                              x    x    1   
                                 0    0         0    0    0          
                                 29
  236                           ;                              x    1    0   
                                 0    0         0    0    0          
                                 30
  237                           ;                              1    0    0   
                                 0    0         0    0    0          
                                 31
  238                           ;                              0    0    0   
                                 0    0         0    0    0          
                                 32
  239                           ;
  240                           ;
  241                           ;               (2) MUST be defined in
                                 'cpu_a.asm' (or 'cpu_c.c') if CPU_CFG_TRAIL_ZE
                                ROS_ASM_PRESENT is
  242                           ;                   #define'd in 'cpu_cfg.h'
                                 or 'cpu.h'.
  243                           ;*********************************************
                                ***********************************************
                                ************
  244                           
  245                           CPU_CntTrailZeros:
  246    00000044 90FAA0F0              RBIT    R0, R0                         
                                                      ; Reverse bits
  247    00000048 B0FA80F0              CLZ     R0, R0                         
                                                      ; Count trailing
                                                      zeros
  248    0000004C 7047                  BX      LR
  249                           
  250                           
  251                           ;*********************************************
                                ***********************************************
                                ************
  252                           ;                                           
                                 CPU_RevBits()
  253                           ;                                           
                                 REVERSE BITS
  254                           ;
  255                           ; Description : Reverses the bits in a data
                                 value.
  256                           ;
  257                           ; Prototypes  : CPU_DATA  CPU_RevBits(CPU_DATA
                                  val);
  258                           ;
  259                           ; Argument(s) : val         Data value to
                                 reverse bits.
  260                           ;
  261                           ; Return(s)   : Value with all bits in 'val'
                                 reversed (see Note #1).
  262                           ;
  263                           ; Note(s)     : (1) The final, reversed data
                                 value for 'val' is such that :
  264                           ;
  265                           ;                       'val's final bit  0   
                                    =  'val's original bit  N
  266                           ;                       'val's final bit  1   
                                    =  'val's original bit (N - 1)
  267                           ;                       'val's final bit  2   
                                    =  'val's original bit (N - 2)
  268                           ;
  269                           ;                               ...           
                                                ...
  270                           ;
  271                           ;                       'val's final bit (N -
                                 2)  =  'val's original bit  2
  272                           ;                       'val's final bit (N -
                                 1)  =  'val's original bit  1
  273                           ;                       'val's final bit  N   
                                    =  'val's original bit  0
  274                           ;*********************************************
                                   - cpu_a -                          Page    7

                                ***********************************************
                                ************
  275                           
  276                           CPU_RevBits:
  277    0000004E 90FAA0F0              RBIT    R0, R0                         
                                                      ; Reverse bits
  278    00000052 7047                  BX      LR
  279                           
  280                           
  281                           ;*********************************************
                                ***********************************************
                                ************
  282                           ;                                     CPU
                                 ASSEMBLY PORT FILE END
  283                           ;*********************************************
                                ***********************************************
                                ************
  284                           
  285                                   END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 84          #
##############################



